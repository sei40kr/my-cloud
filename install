#!/usr/bin/env bash

# install
# author: Seong Yong-ju <sei40kr@gmail.com>

: "${XDG_CONFIG_HOME:=${HOME}/.config}"

basepath="$(dirname "$(realpath "$0")")"
# shellcheck source=install_helpers.bash
. "${basepath}/install_helpers.bash"

setup_basic() {
    install_ntfs_3g() {
        print_title 'NTFS-3G'
        print_desc \
            'NTFS-3G is an open source implementation of Microsoft NTFS that includes read and write support.'

        if ! ask_yn 'Would you like to install?'; then
            return
        fi

        pacman_sync ntfs-3g

        pause
    }

    install_fstrim() {
        print_title 'TRIM'

        if ! ask_yn 'Would you like to install?'; then
            return
        fi

        sudo_systemctl_enable fstrim.timer

        pause
    }

    install_ntp() {
        print_title \
            'Network Time Protocol daemon - https://wiki.archlinux.org/index.php/Network_Time_Protocol_daemon'
        print_desc \
            'Network Time Protocol is the most common method to synchronize the software clock of a GNU/Linux system with internet time servers.'

        if ! read_yn 'Would you like to install?'; then
            return
        fi

        pacman_sync ntp

        sudo timedatectl set-timezone Asia/Tokyo

        pause
    }

    install_zsh() {
        print_title 'Zsh - https://wiki.archlinux.org/index.php/Zsh'
        print_desc \
            'Zsh is a powerful shell that operates as both an interactive shell and as a scripting language interpreter.'

        if ! ask_yn 'Would you like to install?'; then
            return
        fi

        pacman_sync zsh

        sudo chsh -s "$(command -v zsh)" "$USER"

        mkdir -p "${HOME}/.zplugin"
        git clone -q https://github.com/zdharma/zplugin.git "${HOME}/.zplugin/bin"

        ln -fs "${HOME}/my-cloud/zsh/zshenv" "${HOME}/.zshenv"
        ln -fs "${HOME}/my-cloud/zsh/zprofile" "${HOME}/.zprofile"
        ln -fs "${HOME}/my-cloud/zsh/zshrc" "${HOME}/.zshrc"

        pause
    }

    install_openssh() {
        print_title 'OpenSSH - https://wiki.archlinux.org/index.php/OpenSSH'
        print_desc \
            'OpenSSH (OpenBSD Secure Shell) is a set of computer programs providing encrypted communication sessions over a computer network using the Secure Shell (SSH) protocol.'

        if ! ask_yn 'Would you like to install?'; then
            return
        fi

        pacman_sync openssh

        # TODO Prohibit password authentication

        sudo_systemctl_enable sshd.service

        pause
    }

    install_trizen() {
        print_title 'Trizen'
        print_desc 'trizen is a lightweight wrapper for AUR, written in Perl.'

        if ! ask_yn 'Would you like to install?'; then
            return
        fi

        if ! pacman_query trizen; then
            echo "Installing ${BOLD}trizen${RESET}"

            pacman_sync base-devel git perl

            tmpdir="$(mktemp -d '/tmp/trizen-XXXXXXXXXX')"
            git clone -q https://aur.archlinux.org/trizen.git "$tmpdir"
            ( cd "$tmpdir"
              makepkg -mis --noconfirm --needed )
        fi

        pause
    }

    install_python() {
        print_title 'Python - https://wiki.archlinux.org/index.php/Python'

        if ! ask_yn 'Would you like to install?'; then
            return
        fi

        pacman_sync python python-pip

        pause
    }

    install_ntfs_3g
    install_fstrim
    install_ntp

    install_zsh
    install_openssh

    install_trizen

    install_python
}

install_flexget() {
    print_title 'FlexGet'

    if ! ask_yn 'Would you like to install?'; then
        return
    fi

    pip_install FlexGet 'requests[socks]' deluge-client

    ln -fs "${HOME}/my-cloud/flexget/config.yml" "${XDG_CONFIG_HOME}/flexget/config.yml"

    cat <<EOM >"${XDG_CONFIG_HOME}/systemd/user/flexget.service"
[Unit]
Description = FlexGet Daemon
After = network.target

[Service]
Type=simple
RemainAfterExit=yes
ExecStart = %h/.local/bin/flexget daemon start
ExecStop = %h/.local/bin/flexget daemon stop
ExecReload = %h/.local/bin/flexget daemon reload
KillMode=process

[Install]
WantedBy = default.target
EOM
    systemctl_user_enable flexget.service

    pause
}

install_deluge() {
    print_title 'Deluge - https://wiki.archlinux.org/index.php/Deluge'
    print_desc \
        'Deluge is a full-featured BitTorrent application written in Python 2.'

    if ! ask_yn 'Would you like to install?'; then
        return
    fi

    pacman_sync deluge xdg-user-dirs

    # TODO Configure Deluge using deluge-console

    mkdir -p "${XDG_CONFIG_HOME}/systemd/user"
    cat <<EOM >"${XDG_CONFIG_HOME}/systemd/user/deluged.service"
[Unit]
Description=Deluge Daemon
After=network.target

[Service]
ExecStart=/usr/bin/deluged -d

[Install]
WantedBy=default.target
EOM
    cat <<EOM >"${XDG_CONFIG_HOME}/systemd/user/deluge-web.service"
[Unit]
Description=Deluge Web UI
After=deluged.service

[Service]
ExecStart=/usr/bin/deluge-web -d

[Install]
WantedBy=default.target
EOM
    systemctl_user_enable deluged.service
    systemctl_user_enable deluge-web.service

    LC_ALL=C xdg-user-dirs-update

    pause
}

while true; do
    print_title 'my-cloud'

    echo "  1) $(menu_item 'Basic Setup')"
    echo "  2) $(menu_item 'FlexGet')"
    echo "  3) $(menu_item 'Deluge')"
    echo ''
    echo '  q) Quit'
    echo ''

    read -rp 'Enter your option: ' opt

    case "$opt" in
        1 )
            setup_basic
            ;;
        2 )
            if ask_yn 'You need to run Basic Setup at first. Are you sure to continue?'
            then
                install_flexget
            fi
            ;;
        3 )
            install_deluge
            ;;

        q )
            break
            ;;
    esac
done
