#!/usr/bin/env bash

# install
# author: Seong Yong-ju <sei40kr@gmail.com>

IFS=$'\n\t'

COLUMNS="$(tput cols)"

BOLD="$(tput bold)"
RED="$(tput setaf 1)"
GREEN="$(tput setaf 2)"
YELLOW="$(tput setaf 3)"
BLUE="$(tput setaf 4)"
PURPLE="$(tput setaf 5)"
CYAN="$(tput setaf 6)"
WHITE="$(tput setaf 7)"
RESET="$(tput sgr0)"

: ${XDG_CONFIG_HOME:=${HOME}/.config}

print_line() {
    local empty_line
    empty_line="$(printf "%${COLUMNS}s")"

    echo "${empty_line// /-}"
}

print_title() {
    local title
    title="$1"

    clear
    print_line
    echo "# ${BOLD}${title}${RESET}"
    print_line
    echo ''
}

print_desc() {
    local desc
    desc="$1"

    echo "$desc"
    echo ''
}

ask_yn() {
    local prompt
    local answer
    prompt="$1"

    read -n1 -rp "${prompt} [yn]: " answer
    echo ''
    echo ''

    if [[ "$answer" == [yY] ]]; then
        return 0
    fi

    return 1
}

print_info() {
    local message
    message="$1"

    echo "${message}"
}

print_warning() {
    local message
    message="$1"

    echo -e "${YELLOW}${message}${RESET}"
}

print_danger() {
    local message
    message="$1"

    echo -e "${RED}${message}${RESET}"
}

error() {
    local message
    local status_code
    message="$1"
    status_code="$2"

    echo "$message" >&2
    exit "${status_code:-1}"
}

pause() {
    print_line
    read -sn 1 -p 'Press enter to continue ...'
}

pacman_query() {
    local -a pkgs
    pkgs=( "$@" )

    pacman -Q "${pkgs[@]}" &>/dev/null
}

pacman_sync() {
    local -a pkgs
    pkgs=( "$@" )
    sudo pacman -Spy --print-format '%r' "${pkgs[@]}" | read -ra repos

    echo 'Installing'

    for pkg in "${pkgs[@]}"; do
        echo "- ${pkg}"
    done

    sudo pacman -Sy --needed --noconfirm --noprogressbar "${pkgs[@]}"
}

trizen_sync() {
    local -a pkgs
    pkgs=( "$@" )

    if ! pacman_query trizen; then
        error 'trizen is not installed. Aborting.'
    fi

    echo 'Installing'

    for pkg in "${pkgs[@]}"; do
        echo "- ${pkg}"
    done

    trizen -Sy --needed --noconfirm --noprogressbar --nopull "${pkgs[@]}"
}

systemctl_enable() {
    local service
    service="$1"

    sudo systemctl enable --now "$service"
}

systemctl_user_enable() {
    local service
    service="$1"

    systemctl --user enable --now "$service"
}

pip_install() {
    local -a pkgs
    pkgs=( "$@" )

    pip install --user --exists-action i --disable-pip-version-check "${pkgs[@]}"
}

install_samba() {
    print_title 'Samba - https://wiki.archlinux.org/index.php/Samba'
    print_desc 'Samba is a re-implementation of the SMB networking protocol.'

    if ! ask_yn 'Would you like to install?'; then
        return
    fi

    pacman_sync cifs-utils

    sudo cat <<EOM >/etc/systemd/system/mnt-media.mount
[Unit]
Description=Mount media at boot
Requires=systemd-networkd.service
After=network-online.target
Wants=network-online.target

[Mount]
What=//192.168.0.1/sda1
Where=/mnt/media
Options=x-systemd.automount,noauto,x-systemd.idle-timeout=60,x-systemd.device-timeout=5s,x-systemd.mount-timeout=5s,guest,vers=2.0
Type=cifs
TimeoutSec=30

[Install]
WantedBy=multi-user.target
EOM
    systemctl_enable mnt-media.mount

    pause
}

install_openssh() {
    print_title 'OpenSSH - https://wiki.archlinux.org/index.php/OpenSSH'
    print_desc \
        'OpenSSH (OpenBSD Secure Shell) is a set of computer programs providing encrypted communication sessions over a computer network using the Secure Shell (SSH) protocol.'

    if ! ask_yn 'Would you like to install?'; then
        return
    fi

    pacman_sync openssh

    # TODO Prohibit password authentication

    systemctl_enable sshd.service

    pause
}

install_trizen() {
    print_title 'Trizen'
    print_desc 'trizen is a lightweight wrapper for AUR, written in Perl.'

    if ! ask_yn 'Would you like to install?'; then
        return
    fi

    echo "Installing ${BOLD}trizen${RESET}"

    if ! pacman_query trizen; then
        pacman_sync base-devel git perl

        tmp_dir="$(mktemp -d '/tmp/trizen-XXXXXXXXXX')"
        git clone https://aur.archlinux.org/trizen.git "$tmp_dir"
        ( cd "$tmp_dir"; makepkg -mis --noconfirm --needed )
    fi

    pause
}

install_python() {
    print_title 'Python - https://www.python.org'
    print_desc 'Python is a programming language that lets you work quickly
and integrate systems more effectively.'

    if ! ask_yn 'Would you like to install?'; then
        return
    fi

    pacman_sync python python-pip

    pause
}

install_flexget() {
    print_title 'FlexGet - https://flexget.com'
    print_desc \
        'FlexGet is a multipurpose automation tool for all of your media'

    if ! ask_yn 'Would you like to install?'; then
        return
    fi

    # TODO Install deluge-client
    pip_install FlexGet requests[socks]
    # TODO Install FlexGet config

    pause
}

install_deluge() {
    print_title 'Deluge - https://deluge-torrent.org'
    print_desc \
        'Deluge is a lightweight, Free Software, cross-platform BitTorrent client.'

    if ! ask_yn 'Would you like to install?'; then
        return
    fi

    pacman_sync deluge

    # TODO Configure Deluge using deluge-console

    mkdir -p "${XDG_CONFIG_HOME}/systemd/user"
    cat <<EOM >"${XDG_CONFIG_HOME}/systemd/user/deluged.service"
[Unit]
Description=Deluge Daemon
After=network.target

[Service]
ExecStart=/usr/bin/deluged -d -P %h/.config/deluge/deluge.pid

[Install]
WantedBy=default.target
EOM
    cat <<EOM >"${XDG_CONFIG_HOME}/systemd/user/deluge-web.service"
[Unit]
Description=Deluge Web UI
After=deluged.service

[Service]
ExecStart=/usr/bin/deluge-web --ssl

[Install]
WantedBy=default.target
EOM
    systemctl_user_enable deluged.service
    systemctl_user_enable deluge-web.service

    pause
}

install_plex_media_server() {
    print_title 'Plex Media Server - https://www.plex.tv'
    print_desc 'Plex allows you to manage, curate, and stream your personal media along with premium content. Enjoy your own content on all your devices wherever you are with Plex.'

    if ! ask_yn 'Would you like to install?'; then
        return
    fi

    trizen_sync plex-media-server-plexpass

    systemctl_enable plexmediaserver.service

    pause
}

install_samba
install_openssh
install_trizen
install_python

install_flexget
install_deluge
install_plex_media_server
